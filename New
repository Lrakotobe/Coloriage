import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import org.apache.hadoop.fs.*;
import org.apache.spark.sql.SparkSession;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.junit.MockitoJUnitRunner;

import java.net.URI;
import java.util.Arrays;
import java.util.List;

@RunWith(MockitoJUnitRunner.class)
public class utilsTest {

    @Mock
    private SparkSession sparkSession;

    @Mock
    private FileSystem fileSystem;

    @Mock
    private RemoteIterator<LocatedFileStatus> fileStatusListIterator;

    @Mock
    private LocatedFileStatus fileStatus;

    @Mock
    private S3Properties s3config;

    @InjectMocks
    private Utils utils;

    @Before
    public void setUp() throws Exception {
        // Initialize the mocks
        MockitoAnnotations.openMocks(this);

        // Set up mock behavior
        when(sparkSession.sparkContext()).thenReturn(null); // Simplified for the example
        when(s3config.getEnv()).thenReturn("someEnv");
        when(fileSystem.listFiles(any(Path.class), eq(true))).thenReturn(fileStatusListIterator);
    }

    @Test
    public void testFindAndRenameCsvFiles() throws Exception {
        // Set up the file status iterator mock behavior
        when(fileStatusListIterator.hasNext()).thenReturn(true, false);
        when(fileStatusListIterator.next()).thenReturn(fileStatus);

        // Mock file status behavior
        Path oldPath = new Path("s3a://someEnv/oldPath");
        Path newPath = new Path("s3a://someEnv/newPath");
        when(fileStatus.getPath()).thenReturn(oldPath);
        when(fileStatus.getPath().getName()).thenReturn("file.csv");
        when(fileStatus.getPath().toString()).thenReturn("s3a://someEnv/oldPath/file.csv");

        // Mock file system behavior
        when(fileSystem.exists(newPath)).thenReturn(false);

        // Call the method
        List<String> result = utils.findAndRenameCsvFiles(sparkSession, ".csv", "s3a://someEnv/oldPath", "s3a://someEnv/newPath", s3config);

        // Verify interactions and assert results
        verify(fileSystem).rename(oldPath, newPath);
        verify(fileSystem).delete(oldPath, true);
        assertEquals(Arrays.asList("s3a://someEnv/oldPath/file.csv"), result);
    }
}
