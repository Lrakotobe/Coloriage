import org.apache.spark.sql.SparkSession;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.fs.RemoteIterator;
import org.apache.hadoop.fs.LocatedFileStatus;
import org.apache.hadoop.conf.Configuration;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class FindFileSparkMinIO {
    public static List<String> find(SparkSession spark, String minioUrl, String accessKey, String secretKey, String bucket, String extension) throws IOException {
        List<String> matches = new ArrayList<>();

        // Configuration de la session Spark pour MinIO
        Configuration hadoopConf = spark.sparkContext().hadoopConfiguration();
        hadoopConf.set("fs.s3a.endpoint", minioUrl);
        hadoopConf.set("fs.s3a.access.key", accessKey);
        hadoopConf.set("fs.s3a.secret.key", secretKey);
        hadoopConf.set("fs.s3a.path.style.access", "true");
        hadoopConf.set("fs.s3a.impl", "org.apache.hadoop.fs.s3a.S3AFileSystem");

        // Créer un FileSystem pour interagir avec MinIO
        FileSystem fs = FileSystem.get(hadoopConf);
        Path path = new Path("s3a://" + bucket);

        // Utiliser RemoteIterator pour parcourir les fichiers
        RemoteIterator<LocatedFileStatus> fileStatusListIterator = fs.listFiles(path, true);

        while (fileStatusListIterator.hasNext()) {
            LocatedFileStatus fileStatus = fileStatusListIterator.next();
            if (fileStatus.getPath().getName().endsWith(extension)) {
                matches.add(fileStatus.getPath().toString());
            }
        }

        return matches;
    }

    public static void main(String[] args) throws IOException {
        // Initialisation de la session Spark
        SparkSession spark = SparkSession.builder()
                .appName("FindFileSparkMinIO")
                .master("local[*]")
                .getOrCreate();

        // Remplacer par vos paramètres MinIO et l'extension de fichier recherchée
        String minioUrl = "http://localhost:9000";
        String accessKey = "your-access-key";
        String secretKey = "your-secret-key";
        String bucket = "your-bucket-name";
        String extension = ".txt";

        List<String> files = find(spark, minioUrl, accessKey, secretKey, bucket, extension);

        // Affichage des fichiers trouvés
        for (String file : files) {
            System.out.println(file);
        }

        // Fermeture de la session Spark
        spark.stop();
    }
}
