import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;

import static org.mockito.Mockito.*;

class BaseReturnReportServiceTest {

    @Mock
    private SparkSession sparkSession;

    @Mock
    private Dataset<Row> datasetRows;

    @Mock
    private ReportProperties reportProperties;

    @InjectMocks
    private BaseReturnReportService baseReturnReportService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testPersistWithValidInputs() {
        // Mocking des données
        when(datasetRows.filter(anyString())).thenReturn(datasetRows);
        when(datasetRows.isEmpty()).thenReturn(false);
        
        // Appel de la méthode à tester
        baseReturnReportService.persist("inputPath", datasetRows, reportProperties);
        
        // Vérifications des appels
        verify(datasetRows, times(1)).filter(anyString());
        verify(datasetRows, times(1)).write();
        // Ajout d'autres vérifications sur le format, options etc.
    }

    @Test
    void testPersistWithEmptyInputs() {
        // Mocking pour tester les inputs vides
        when(datasetRows.isEmpty()).thenReturn(true);
        
        // Appel de la méthode à tester
        baseReturnReportService.persist("inputPath", datasetRows, reportProperties);
        
        // Vérifier que le fichier header est créé avec seulement le header
        verify(datasetRows, times(1)).isEmpty();
        verify(datasetRows, never()).write();
    }

    @Test
    void testPersistThrowsException() {
        // Mocking pour simuler une exception
        when(sparkSession.createDataset(anyList(), any())).thenThrow(new RuntimeException("Test exception"));

        // Attendre que l'exception soit lancée
        assertThrows(RuntimeException.class, () -> {
            baseReturnReportService.persist("inputPath", datasetRows, reportProperties);
        });
    }
}

